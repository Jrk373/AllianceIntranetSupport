---
title: "Alliance Enrolled Members"
subtitle: ""
author: 
  name: "John Ryan Kivela, MA"
  email: "Ryan.Kivela@narbha.org"
  affiliation: "The Alliance ACO"
date: today
date-format: long
format:
  html:
    theme: pulse
    embed-resources: true
    toc: true
    toc-depth: 6
    code-fold: true
    footnotes-hover: true
---

This document provides the data framework for the Alliance Enrolled Membership roster

# Method

This code sets up the project, installing libraries, setting parameters for the rendered document, and creating various tables and vectors of data that will be incorporated later.

## r Setup

```{r}
#| label: Setup
#| eval: true
#| include: false
#| echo: false
#| warning: false
#| error: false

## Load Libraries
library(tidyverse)
library(readxl)
library(odbc)

# Set up ODBC Connection
QRPTP01 <- DBI::dbConnect(odbc::odbc(),"AllianceData")

```

## Common Objects

```{r}
#| label: Create Common Objects
#| eval: true
#| include: false
#| echo: false
#| warning: false
#| error: false

# Create table for inline code
# InLineCode <- data.frame(
#   Column1 = "text")

# Vector of Alliance Provider Name
Provider_ShortName <- (c("CBI", "CPIH", "EHS", "LCBHC", "MMHC", "SHG", "SBHs", "TGC", "PH"))

# Vector of NAZ Counties
NAZ_Counties <- (c("Apache", "Coconino", "Mohave", "Navajo", "Yavapai"))

# Create provider shortnames based on TIN
# Create a data frame called ProviderShortnames
ProviderTIN <-
data.frame(
BHHProvider_TIN = c("86-0206928", "86-0206928", "86-0207499", "86-0214457", "86-0215065", "86-0223720", "86-0250938", "86-0290033", "86-0473221", "94-2880847"),
BHHShortName = c("PH", "WYGC", "SHG", "MMHC", "CPIH", "TGC", "LCBHC", "SBHS", "EHS", "CBI")
)

# Create a list with the ultimate column names for the data
#VBPTrendReport_colnames <- 
  # c("ClaimsAdjudicatedThrough",
  #   "AllianceProviderTIN",
  #   "ProviderShortname",
  #   "HealthHomeName",
  #   "MemberID",
  #   "LastName",
  #   "FirstName",
  #   "MeasureID",
  #   "Measure",
  #   "GapStatus")

# Contract Measures List
#ContractMeasures <- c("AMM", "FUH", "FUM", "HDO", "FUA")

# HEDIS Value Sets
#MyHEDIS2023_AllValueSetsToCodes <- read_xlsx("./documents/M. HEDIS MY 2023 Volume 2 Value Set Directory 2023-03-31 - Copy.xlsx", sheet = "Value Sets to Codes")

#MyHEDIS2023_MedicationDirectory <- read_xlsx("./documents/HEDIS MY 2023 Medication List Directory 2023-03-31.xlsx", sheet = "Medication Lists to Codes")

# Z Codes
#Z_Codes <- read_xlsx("./documents/Z-Codes.xlsx", sheet = "Sheet1")

```

## Enrollments

The next few code sets queries the HCA data bases to gather data from the Global Members Data base.

### Enrollment Roster

The table GlobalMembers.dbo.Enrollments is the primary source for member enrollment. This table is used as the foundation of the membership enrollment roster and provides us with unique identifiers and all enrollment segments for an individual.

```{sql, connection = QRPTP01, output.var = "GM_Enrollments_AllACC"}

-- This is the source of truth for enrollment start and end dates

declare @AzACC int = narbha.dbo.ufn_GetIntLobIdFromLobName('ArizonaAcc', getdate());

-- declare @AzRbha int = narbha.dbo.ufn_GetIntLobIdFromLobName('AzRBHA', getdate());

-- declare @AzSO int = narbha.dbo.ufn_GetIntLobIdFromLobName('AZ State Only', getdate());

-- declare @AzHCIC int = narbha.dbo.ufn_GetIntLobIdFromLobName('HCIC', getdate());

SELECT * 

FROM GlobalMembers.dbo.Enrollments 

WHERE lobid = @AzACC 
  AND void = 0 
  
ORDER BY PrimaryId , EnrollmentDate DESC

```

### All AZ Enrollments Data

The table GlobalMembers.dbo.DailyMemberShipAllArizonaEnrollments provides us with information about the member's assigned health home.

```{sql, connection = QRPTP01, output.var = "GM_ALLAZ_Enrollments"}

-- Provides various data including assigned health home

SELECT * 

FROM GlobalMembers.dbo.DailyMemberShipAllArizonaEnrollments

WHERE void = 0 
  
ORDER BY PrimaryId
```

### All AZ Addresses Data

The table GlobalMembers.dbo.DailyMemberShipAllArizonaAddresses provides us with residential information including address, effective date of address, and email address.

```{sql, connection = QRPTP01, output.var = "GM_ALLAZ_Addresses"}

-- Provides address information

SELECT * 

FROM GlobalMembers.dbo.DailyMemberShipAllArizonaAddresses

WHERE Void = 0 
  
```

### Client Demographics

The table GlobalMembers.dbo.Clients provides us with important demographic and REaL (Race, Ethnicity, and Language) data.

```{sql, connection = QRPTP01, output.var = "GM_Clients_Demographics"}

declare @AzACC int = narbha.dbo.ufn_GetIntLobIdFromLobName('ArizonaAcc', getdate());

-- declare @AzRbha int = narbha.dbo.ufn_GetIntLobIdFromLobName('AzRBHA', getdate());

-- declare @AzSO int = narbha.dbo.ufn_GetIntLobIdFromLobName('AZ State Only', getdate());

-- declare @AzHCIC int = narbha.dbo.ufn_GetIntLobIdFromLobName('HCIC', getdate());

SELECT * 

FROM GlobalMembers.dbo.Clients

WHERE lobid = @AzACC 
  AND void = 0 
  
ORDER BY LastName DESC

```

### DUGLess

This brings in various data from the DUGLess.

```{sql, connection = QRPTP01, output.var = "GM_DUGLess"}

declare @AzACC int = narbha.dbo.ufn_GetIntLobIdFromLobName('ArizonaAcc', getdate());

-- declare @AzRbha int = narbha.dbo.ufn_GetIntLobIdFromLobName('AzRBHA', getdate());

-- declare @AzSO int = narbha.dbo.ufn_GetIntLobIdFromLobName('AZ State Only', getdate());

-- declare @AzHCIC int = narbha.dbo.ufn_GetIntLobIdFromLobName('HCIC', getdate());

SELECT * 

FROM GlobalMembers.dbo.DUGLessDemographics

WHERE lobid = @AzACC 
  AND void = 0 

```

### Claims for last service

This set of code identifies the last service provided for certain provider types. This data provides additional information for health homes to conduct meaningful outreach.

```{sql, connection = QRPTP01, output.var = "LastService"}

-- Provides the last known service, and service provider for certain provider types.

WITH RankedClaims AS (
    SELECT
        PrimaryID,
        BegDate,
        ProviderName,
		    ProviderType,
		    Fedtaxid, 
		    RenderingProviderNpi,
        ROW_NUMBER() OVER (PARTITION BY PrimaryID ORDER BY BegDate DESC) AS rn
    FROM claims.dbo.shcavos
    --WHERE BegDate >= @start AND BegDate <= @end
)
SELECT PrimaryID, BegDate, ProviderName, Fedtaxid, RenderingProviderNpi
FROM RankedClaims
WHERE rn = 1
    AND ProviderType IN ('02','29', '64', '63', '71', 
	'77', '78', 'A3', 'A5', 'A6', 'B1', 'B2', 'B3', 
	'B5', 'B6', 'B7', 'B8', 'C2', 'C5', 'IC')

```

```{r}
# Write enrollment data to files for easy test load.
# write.csv(GM_ALLAZ_Addresses, "./data/input/GM_AllAZAddresses.csv")
# write.csv(GM_ALLAZ_Enrollments, "./data/input/GM_AllAZ_Enrollments.csv")
# write.csv(GM_Clients_Demographics, "./data/input/GM_Clients_Demographics.csv")
# write.csv(GM_DUGLess, "./data/input/GM_DUGLess.csv")
# write.csv(GM_Enrollments_AllACC, "./data/input/GM_Enrollments_AllACC.csv")
# write.csv(LastService, "./data/input/LastService.csv")
```

### Enrollment Calculation

The following code goes through a procedure to combine the data from the collection of member information tables into a single enrollment roster.

This table is the record of all individuals who have an enrollment with BCBS HCA ACC health plan who are auto-assigned to an Alliance Provider, and who have a residential address in the northern GSA counties. In other words, this is a roster of all Alliance ACO members.

```{r}
#| label: Enrollment Calculation
#| eval: true
#| include: true
#| echo: true
#| warning: false
#| error: false

# Identify Alliance Membership

# Merge Enrollment files from HCA global members database.
AllianceEnrolledMembers_Merge <-
  merge(x = GM_Enrollments_AllACC, # Source of truth for enrollment segments
        y = GM_Clients_Demographics, # assigned health home information
        by = "PrimaryId",
        all.x = TRUE)

# Select variables for analysis  
AllianceEnrolledMembers_Merge <-  
  AllianceEnrolledMembers_Merge |> 
  filter(Void.x == FALSE & Void.y == FALSE) |>  # FALSE = The record has not be voided
  select(1, 4, 5, 30, 28, 31:37, 44, 61)

AllianceEnrolledMembers_Merge <-
  merge(x = AllianceEnrolledMembers_Merge,
        y = GM_ALLAZ_Enrollments, # Adds AHCCCSID and BHHShortname
        by = "PrimaryId",
        all.x = TRUE)

AllianceEnrolledMembers_Merge <-
  AllianceEnrolledMembers_Merge |> 
  #rename("AHCCCSID" = AhcccsId) |> 
  select(1, 17, 2:14, 42)


AllianceEnrolledMembers_Merge <-
  merge(x = AllianceEnrolledMembers_Merge,
        y = ProviderTIN, # Add provider TIN of health home
        by = "BHHShortName",
        all.x = TRUE)

# remove hyphen in TIN
AllianceEnrolledMembers_Merge$BHHProvider_TIN <- gsub("-", "", AllianceEnrolledMembers_Merge$BHHProvider_TIN)

# Select variables for analysis
AllianceEnrolledMembers_Merge <-
  AllianceEnrolledMembers_Merge |> 
  select(2, 3, 6, 7, 1, 17, 4, 5, 8:16)

# Rename to remove the .x
AllianceEnrolledMembers_Merge <-
  AllianceEnrolledMembers_Merge |> 
  rename("EnrollmentDate" = EnrollmentDate.x,
         "DisenrollmentDate" = DisenrollmentDate.x)

AllianceEnrolledMembers_Merge <-
  merge(x = AllianceEnrolledMembers_Merge,
        y = GM_ALLAZ_Addresses, # adds address info
        by = "PrimaryId",
        all.x = TRUE)

# Select Variables
AllianceEnrolledMembers_Merge <- 
  AllianceEnrolledMembers_Merge |> 
  select(1:17, 22, 24, 44, 34, 35, 60)

# Add DUGLess variables
AllianceEnrolledMembers_Merge <-
  merge(x = AllianceEnrolledMembers_Merge,
        y = GM_DUGLess,
        by = "AhcccsId",
        all.x = TRUE)

# Select Variables
AllianceEnrolledMembers_Merge <- 
  AllianceEnrolledMembers_Merge |> 
  select(1:16, 18:23, 48, 51) |> 
  rename(PrimaryId = "PrimaryId.x",
         DOB = "DOB.x",
         EmploymentStatus = "EmploymentStatus.y")

# Remove any rogues spaces in any field in the data
AllianceEnrolledMembers_Merge <- 
  AllianceEnrolledMembers_Merge |> 
  mutate_all(str_squish)

# The result at this point is a data set containing enrollment information for all ACC members with either enrolled or disenrolled status
# Next, we make it just Alliance Members

# Filter for The Alliance Providers
# This is about 385,264 people
AllianceEnrolledMembers <-
  AllianceEnrolledMembers_Merge |> 
  filter(BHHShortName %in% Provider_ShortName)

# Then filter for the 5 northern counties
# This is about 313,722 people
AllianceEnrolledMembers <-
  AllianceEnrolledMembers |> 
  filter(ResCountyName %in% NAZ_Counties)

# Filter out deceased people (no offense intended)
# This is about 307, 613 people
AllianceEnrolledMembers <-
  AllianceEnrolledMembers |> 
  filter(is.na(DOD))

# Filter out end dated enrollment segments
# This leaves us with only active enrollments
AllianceEnrolledMembers <-
  AllianceEnrolledMembers |>
  filter(is.na(DisenrollmentDate))

# This table is the record of all living individuals who have an enrollment with BCBS HCA ACC health plan who are auto-assigned to an Alliance Provider, and who have a residential address in the northern GSA counties. In other words, this is a roster of all Alliance ACO members.

```

### Demographics

#### Race and Ethnicity

```{r}
# Add Race Codes
RaceCodes <- read.csv("./documents/RaceCodes.csv")

RaceCodes <- 
  RaceCodes |> 
  select(
    HipaaCode,
    HipaaDescription
  ) |> 
  rename(Race = "HipaaCode",
         Race1 = "HipaaDescription")

AllianceEnrolledMembers <-
  merge(x = AllianceEnrolledMembers,
        y = RaceCodes,
        by = "Race",
        all.x = TRUE)

AllianceEnrolledMembers <-
  AllianceEnrolledMembers |> 
  rename(RaceCode = "Race",
         Race = "Race1")

# AllianceEnrolledMembers <- 
#   AllianceEnrolledMembers |> 
#   select(-Race)

# Add ethnicity
EthnicityCodes <- read.csv("./documents/EthnicityCodes.csv")

EthnicityCodes <-
  EthnicityCodes |> 
  select(
    Code,
    Description
  ) |> 
  rename(Ethnicity = "Code",
         Ethnicity1 = "Description")

EthnicityCodes <- 
  EthnicityCodes |> 
  slice(29:n())

# format as numbers
EthnicityCodes$Ethnicity <- as.numeric(EthnicityCodes$Ethnicity)
AllianceEnrolledMembers$Ethnicity <- as.numeric(AllianceEnrolledMembers$Ethnicity)
  
AllianceEnrolledMembers <-
  merge(x = AllianceEnrolledMembers,
        y = EthnicityCodes,
        by = "Ethnicity",
        all.x = TRUE)

AllianceEnrolledMembers <-
  AllianceEnrolledMembers |> 
  rename(EthnicityCode = "Ethnicity",
         Ethnicity = "Ethnicity1")

# AllianceEnrolledMembers <-
#   AllianceEnrolledMembers |> 
#   select(-Ethnicity)
```

#### Language

```{r}
LanguageCodes <- read.csv("./documents/LanguageCodes.csv")

LanguageCodes <-
  LanguageCodes |> 
  select(
    shortname,
    name
  ) |> 
  rename(SpokenLanguage = "shortname",
         SpokenLanguage1 = "name")

# Trim Extra Characters
LanguageCodes$SpokenLanguage <-
  trimws(LanguageCodes$SpokenLanguage)
LanguageCodes$SpokenLanguage1 <-
  trimws(LanguageCodes$SpokenLanguage1)

# Spoken Language
AllianceEnrolledMembers <-
  merge(x = AllianceEnrolledMembers,
        y = LanguageCodes,
        by = "SpokenLanguage",
        all.x = TRUE)

AllianceEnrolledMembers <-
  AllianceEnrolledMembers |> 
  rename(SpokenLanguageCode = "SpokenLanguage",
         SpokenLanguage = "SpokenLanguage1")

# AllianceEnrolledMembers <-
#   AllianceEnrolledMembers |> 
#   select(-SpokenLanguage)

```

### Other Characteristcs

#### Marital Status

```{r}
MaritalStatusCodes <- read.csv("./documents/MaritalCodes.csv")

MaritalStatusCodes <-
  MaritalStatusCodes |> 
  select(
    Code,
    Description
  ) |> 
  rename(MaritalStatus = "Code",
         MaritalStatus1 = "Description")

# Trim Extra Characters
MaritalStatusCodes$MaritalStatus <-
  trimws((MaritalStatusCodes$MaritalStatus))
MaritalStatusCodes$MaritalStatus1 <-
  trimws((MaritalStatusCodes$MaritalStatus1))

# Spoken Language
AllianceEnrolledMembers <-
  merge(x = AllianceEnrolledMembers,
        y = MaritalStatusCodes,
        by = "MaritalStatus",
        all.x = TRUE)

AllianceEnrolledMembers <-
  AllianceEnrolledMembers |> 
  rename(MaritalStatusCode = "MaritalStatus",
         MaritalStatus = "MaritalStatus1")

```

#### Employment Status

```{r}

EmploymentCodes <- read.csv("./documents/EmploymentCodes.csv")

EmploymentCodes <-
 EmploymentCodes |> 
  select(
    Code,
    Description
  ) |> 
  rename(EmploymentStatus = "Code",
         Employment1 = "Description")

# Trim Extra Characters
EmploymentCodes$EmploymentStatus <-
  trimws(EmploymentCodes$EmploymentStatus)
EmploymentCodes$Employment1 <-
  trimws(EmploymentCodes$Employment1)

# Spoken Language
AllianceEnrolledMembers <-
  merge(x = AllianceEnrolledMembers,
        y = EmploymentCodes,
        by = "EmploymentStatus",
        all.x = TRUE)

AllianceEnrolledMembers <-
  AllianceEnrolledMembers |> 
  rename(EmploymentStatusCode = "EmploymentStatus",
         EmploymentStatus = "Employment1")

```

#### Military History

```{r}

MilitaryCodes <- read.csv("./documents/MilitaryCodes.csv")

MilitaryCodes <-
 MilitaryCodes |> 
  select(
    Code,
    Description
  ) |> 
  rename(MilitaryStatus = "Code",
         Military1 = "Description")

# Trim Extra Characters
MilitaryCodes$MilitaryStatus <-
  trimws(MilitaryCodes$MilitaryStatus)
MilitaryCodes$Military1 <-
  trimws(MilitaryCodes$Military1)

# Spoken Language
AllianceEnrolledMembers <-
  merge(x = AllianceEnrolledMembers,
        y = MilitaryCodes,
        by = "MilitaryStatus",
        all.x = TRUE)

AllianceEnrolledMembers <-
  AllianceEnrolledMembers |> 
  rename(MilitaryStatusCode = "MilitaryStatus",
         MilitaryStatus = "Military1")

# Select Variables
AllianceEnrolledMembers <-
  AllianceEnrolledMembers |> 
  select(7:18, 1, 30, 2, 29, 3, 28, 4, 27, 6, 25, 5, 26, 19:24)

```

### Last Service

This step adds an indication of where the member received their last service. It only includes select provider types, which are outlined in the SQL code above.

```{r}
#| label: Last Service
#| eval: true
#| include: true
#| echo: true
#| warning: false
#| error: false

LastService <-
  LastService |> 
  rename("PrimaryId" = PrimaryID,
         "DateLastService" = BegDate,
         "LastServiceProvider" = ProviderName,
         "LastSvcProv_FedTaxID" = Fedtaxid,
         "LastSvcProvNPI" = RenderingProviderNpi)

Data_AllianceEnrolledMembers <- 
  merge(x = AllianceEnrolledMembers,
        y = LastService, # add last service information
        by = "PrimaryId",
        all.x = TRUE)
```

### Finalize Enrollment Roster

```{r}
#| label: Finalize Enrollment Roster
#| eval: true
#| include: true
#| echo: true
#| warning: false
#| error: false

# All members, all enrollment segments
write.csv(Data_AllianceEnrolledMembers, "./data/output/AllianceEnrolledMembers_AllSegments.csv")

# Filter for only most recent enrollment segment
AllianceEnrolledMembers <-
  Data_AllianceEnrolledMembers |>
  group_by(AhcccsId) |>
  filter(EnrollmentDate == max(EnrollmentDate)) |> 
  slice(1)

# Write to CSV
 write.csv(AllianceEnrolledMembers, "./data/output/AllianceEnrolledMembers.csv")

 
# Filter for only open enrollment segment
ActiveNAZMembership <-
  Data_AllianceEnrolledMembers |>
  group_by(AhcccsId) |>
  filter(is.na(DisenrollmentDate))

# Write to CSV
 write.csv(ActiveNAZMembership, "./data/output/ActiveNAZMembership.csv") 
```

# Distribute Data

The overall Alliance Daily Inpatient Census is split according to Alliance Provider, and saved to their respective intranet folders.

```{r}
# Create a directory to store the CSV files
data_dir <- "./data/output"
dir.create(data_dir, showWarnings = FALSE)

# Split the data frame based on AllianceProviderShortname
split_data <- split(ActiveNAZMembership, ActiveNAZMembership$BHHShortName)

# Iterate over the list and save each data frame as a separate CSV file in the corresponding folder
for (provider_name in names(split_data)) {
  provider_data <- split_data[[provider_name]]
  folder_name <- file.path(data_dir, provider_name)
  dir.create(folder_name, showWarnings = FALSE)
  file_name <- file.path(folder_name, paste0("ActiveNAZMembership_", provider_name, ".csv"))
  write.csv(provider_data, file = file_name, row.names = FALSE)
}
```
