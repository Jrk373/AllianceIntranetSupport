---
title: "Alliance Inpatient Census"
author: "John Ryan Kivela"
format: html
editor: visual
---

# Setup

```{r}
#| label: Setup
#| eval: true
#| include: false
#| echo: false
#| warning: false
#| error: false

## Load Libraries
library(fs)
library(purrr)
library(readxl)
library(tidyverse)
library(lubridate)

```

# Move previous versions to the Archive folder for each provider

```{r}

# Alliance
# Specify the paths to the source folder and the archive folder
source_folder <- "./data/Output/CensusData/"
archive_folder <- "./data/Output/CensusData/Archive/"
# Get a list of files in the source folder
files <- list.files(source_folder, full.names = TRUE)
# Check if there are any files in the folder
if (length(files) > 0) {
  # Create the archive folder if it doesn't exist
  if (!dir.exists(archive_folder)) {
    dir.create(archive_folder, recursive = TRUE)
  }
  
  # Move files to the archive folder
  for (file in files) {
    new_path <- file.path(archive_folder, basename(file))
    file.rename(file, new_path)
    cat("Moved", file, "to", new_path, "\n")
  }
} else {
  cat("No files to move.\n")
}

# CBI
# Specify the paths to the source folder and the archive folder
source_folder <- "./data/Output/CBI/CensusData/"
archive_folder <- "./data/Output/CBI/CensusData/Archive/"
# Get a list of files in the source folder
files <- list.files(source_folder, full.names = TRUE)
# Check if there are any files in the folder
if (length(files) > 0) {
  # Create the archive folder if it doesn't exist
  if (!dir.exists(archive_folder)) {
    dir.create(archive_folder, recursive = TRUE)
  }
  
  # Move files to the archive folder
  for (file in files) {
    new_path <- file.path(archive_folder, basename(file))
    file.rename(file, new_path)
    cat("Moved", file, "to", new_path, "\n")
  }
} else {
  cat("No files to move.\n")
}

# CPIH
# Specify the paths to the source folder and the archive folder
source_folder <- "./data/Output/CPIH/CensusData/"
archive_folder <- "./data/Output/CPIH/CensusData/Archive/"
# Get a list of files in the source folder
files <- list.files(source_folder, full.names = TRUE)
# Check if there are any files in the folder
if (length(files) > 0) {
  # Create the archive folder if it doesn't exist
  if (!dir.exists(archive_folder)) {
    dir.create(archive_folder, recursive = TRUE)
  }
  
  # Move files to the archive folder
  for (file in files) {
    new_path <- file.path(archive_folder, basename(file))
    file.rename(file, new_path)
    cat("Moved", file, "to", new_path, "\n")
  }
} else {
  cat("No files to move.\n")
}

# LCBHC
# Specify the paths to the source folder and the archive folder
source_folder <- "./data/Output/LCBHC/CensusData/"
archive_folder <- "./data/Output/LCBHC/CensusData/Archive/"
# Get a list of files in the source folder
files <- list.files(source_folder, full.names = TRUE)
# Check if there are any files in the folder
if (length(files) > 0) {
  # Create the archive folder if it doesn't exist
  if (!dir.exists(archive_folder)) {
    dir.create(archive_folder, recursive = TRUE)
  }
  
  # Move files to the archive folder
  for (file in files) {
    new_path <- file.path(archive_folder, basename(file))
    file.rename(file, new_path)
    cat("Moved", file, "to", new_path, "\n")
  }
} else {
  cat("No files to move.\n")
}

# MMHC
# Specify the paths to the source folder and the archive folder
source_folder <- "./data/Output/MMHC/CensusData/"
archive_folder <- "./data/Output/MMHC/CensusData/Archive/"
# Get a list of files in the source folder
files <- list.files(source_folder, full.names = TRUE)
# Check if there are any files in the folder
if (length(files) > 0) {
  # Create the archive folder if it doesn't exist
  if (!dir.exists(archive_folder)) {
    dir.create(archive_folder, recursive = TRUE)
  }
  
  # Move files to the archive folder
  for (file in files) {
    new_path <- file.path(archive_folder, basename(file))
    file.rename(file, new_path)
    cat("Moved", file, "to", new_path, "\n")
  }
} else {
  cat("No files to move.\n")
}

# PH
# Specify the paths to the source folder and the archive folder
source_folder <- "./data/Output/PH/CensusData/"
archive_folder <- "./data/Output/PH/CensusData/Archive/"
# Get a list of files in the source folder
files <- list.files(source_folder, full.names = TRUE)
# Check if there are any files in the folder
if (length(files) > 0) {
  # Create the archive folder if it doesn't exist
  if (!dir.exists(archive_folder)) {
    dir.create(archive_folder, recursive = TRUE)
  }
  
  # Move files to the archive folder
  for (file in files) {
    new_path <- file.path(archive_folder, basename(file))
    file.rename(file, new_path)
    cat("Moved", file, "to", new_path, "\n")
  }
} else {
  cat("No files to move.\n")
}

# SBHS
# Specify the paths to the source folder and the archive folder
source_folder <- "./data/Output/SBHS/CensusData/"
archive_folder <- "./data/Output/SBHS/CensusData/Archive/"
# Get a list of files in the source folder
files <- list.files(source_folder, full.names = TRUE)
# Check if there are any files in the folder
if (length(files) > 0) {
  # Create the archive folder if it doesn't exist
  if (!dir.exists(archive_folder)) {
    dir.create(archive_folder, recursive = TRUE)
  }
  
  # Move files to the archive folder
  for (file in files) {
    new_path <- file.path(archive_folder, basename(file))
    file.rename(file, new_path)
    cat("Moved", file, "to", new_path, "\n")
  }
} else {
  cat("No files to move.\n")
}

# SHG
# Specify the paths to the source folder and the archive folder
source_folder <- "./data/Output/SHG/CensusData/"
archive_folder <- "./data/Output/SHG/CensusData/Archive/"
# Get a list of files in the source folder
files <- list.files(source_folder, full.names = TRUE)
# Check if there are any files in the folder
if (length(files) > 0) {
  # Create the archive folder if it doesn't exist
  if (!dir.exists(archive_folder)) {
    dir.create(archive_folder, recursive = TRUE)
  }
  
  # Move files to the archive folder
  for (file in files) {
    new_path <- file.path(archive_folder, basename(file))
    file.rename(file, new_path)
    cat("Moved", file, "to", new_path, "\n")
  }
} else {
  cat("No files to move.\n")
}

# TGC
# Specify the paths to the source folder and the archive folder
source_folder <- "./data/Output/TGC/CensusData/"
archive_folder <- "./data/Output/TGC/CensusData/Archive/"
# Get a list of files in the source folder
files <- list.files(source_folder, full.names = TRUE)
# Check if there are any files in the folder
if (length(files) > 0) {
  # Create the archive folder if it doesn't exist
  if (!dir.exists(archive_folder)) {
    dir.create(archive_folder, recursive = TRUE)
  }
  
  # Move files to the archive folder
  for (file in files) {
    new_path <- file.path(archive_folder, basename(file))
    file.rename(file, new_path)
    cat("Moved", file, "to", new_path, "\n")
  }
} else {
  cat("No files to move.\n")
}
```

# Enrollment Roster

```{r}
#| label: Alliance Member Enrollment Roster
#| eval: true
#| include: false
#| echo: false
#| warning: false
#| error: false

# Import the data from the monthly Alliance Progress Report
AllianceMemberEnrollmentRoster <- read.csv("./data/ActiveNAZMembership.csv")

# Rename the columns to easy to understand names
colnames(AllianceMemberEnrollmentRoster) <- c("Index", "PrimaryID", "AHCCCSID", "LastName", "FirstName", "Sex", "DateOfBirth", "MemberZipCode", "MemberCountyOfResidence", "AllianceProviderShortname", "EnrollmentStartDate", "LineOfBusiness", "EligibilityGroup", "DisenrollmentDate", "Age")

```

# Inpatient Census

The query is run in SQL using "./source/BHA - InpatientCensus - 30 Days.sql"

## Import the data

```{r}


AllianceInpatientCensus <- read.csv("./data/Input/CensusInpatient.csv")

colnames(AllianceInpatientCensus) <- c("SourceSystem", 
                                       "BuildVersion", 
                                       "LastName", 
                                       "MiddleInitial",
                                       "FirstName",
                                       "MemberID",
                                       "PhoneNumber",
                                       "AdmissionDate",
                                       "LOS",
                                       "Facility",
                                       "FacilityType",
                                       "StayType",
                                       "AdmittingDiagnosisCode",
                                       "AdmittingDiagnosisDescription",
                                       "AdmissionAuthorizationIndicator",
                                       "BuildDate"
                                       )
```

## Attach date and merge with Alliance Member Enrollment Roster data

```{r}
# # First Save today's file with today's date
# 
# # Get today's date
# today <- Sys.Date()
# # Create a data frame
# data <- data.frame(AllianceInpatientCensus)
# # Define the file path and name
# file_root <- "AllianceInpatientCensus"
# output_path <- "./data/output/CensusData/"
# csv_file <- paste0(output_path, file_root, "_", format(today, "%Y-%m-%d"), ".csv")
# # Write the data frame to a CSV file
# write.csv(data, csv_file, row.names = FALSE)

# Load the data
Census_IP <- AllianceInpatientCensus

# Create AHCCCSID from MemberID
Census_IP$AHCCCSID <- substr(Census_IP$MemberID, 4, nchar(Census_IP$MemberID))

# Attach enrollment data to census data
Census_IP <- 
  merge(x = Census_IP,
        y = AllianceMemberEnrollmentRoster,
        by = "AHCCCSID",
        all.x = TRUE)

# Select variables for analysis
Census_IP <-
  Census_IP |> 
  select(
    PrimaryID,
    AHCCCSID,
    LastName.x,
    FirstName.x,
    PhoneNumber,
    AdmissionDate,
    LOS,
    Facility,
    Age,
    Sex,
    DateOfBirth,
    MemberZipCode,
    MemberCountyOfResidence,
    AllianceProviderShortname,
    EnrollmentStartDate,
    DisenrollmentDate
    ) |> 
  arrange(AdmissionDate)

# Get today's date
today <- Sys.Date()
# Create a data frame
data <- data.frame(Census_IP)
# Define the file path and name
file_root <- "AllianceInpatientCensus"
output_path <- "./data/output/CensusData/"
csv_file <- paste0(output_path, file_root, "_", format(today, "%Y-%m-%d"), ".csv")
# Write the data frame to a CSV file
write.csv(data, csv_file, row.names = FALSE)
```

## Split data to each provider

```{r}


# Set the output directory
output_dir <- "./data/output/"
# Create the output directory if it doesn't exist
dir_create(output_dir)
# Get unique AllianceProviderShortname values
provider_names <- unique(Census_IP$AllianceProviderShortname)
# Get today's date in YYYY-MM-DD format
today_date <- format(Sys.Date(), "%Y-%m-%d")

# Split the table by AllianceProviderShortname and save individual CSV files
walk(provider_names, function(provider) {
  # Create provider-specific directory if it doesn't exist
  provider_dir <- file.path(output_dir, provider)
  dir_create(provider_dir)
  # Filter data for the current provider
  provider_data <- filter(Census_IP, AllianceProviderShortname == provider)
  # Construct file name with current date
  file_name <- file.path(provider_dir, paste0("AllianceInpatientCensus", provider, "_", today_date, ".csv"))
  # Save data as CSV
  write.csv(provider_data, file = file_name, row.names = FALSE)
})

# Move files to the Census Data folder in their respective directories, repeat for each provider

# CBI
# Define the current directory path
current_directory <- "./data/output/CBI"  # Update with your current directory path
# Define the new directory path
new_directory <- "./data/output/CBI/CensusData/"
# List all files in the current directory
files_in_directory <- list.files(current_directory, pattern = "^AllianceInpatientCensus")
# Move each file to the new directory and delete the original
for (file_name in files_in_directory) {
  current_file <- file.path(current_directory, file_name)
  new_file <- file.path(new_directory, file_name)
  file.rename(current_file, new_file)
  cat("File moved:", current_file, "to", new_file, "\n")
  }

#CPIH
# Define the current directory path
current_directory <- "./data/output/CPIH"  # Update with your current directory path
# Define the new directory path
new_directory <- "./data/output/CPIH/CensusData/"
# List all files in the current directory
files_in_directory <- list.files(current_directory, pattern = "^AllianceInpatientCensus")
# Move each file to the new directory and delete the original
for (file_name in files_in_directory) {
  current_file <- file.path(current_directory, file_name)
  new_file <- file.path(new_directory, file_name)
  file.rename(current_file, new_file)
  cat("File moved:", current_file, "to", new_file, "\n")
}

#LCBHS
# Define the current directory path
current_directory <- "./data/output/LCBHC"  # Update with your current directory path
# Define the new directory path
new_directory <- "./data/output/LCBHC/CensusData/"
# List all files in the current directory
files_in_directory <- list.files(current_directory, pattern = "^AllianceInpatientCensus")
# Move each file to the new directory and delete the original
for (file_name in files_in_directory) {
  current_file <- file.path(current_directory, file_name)
  new_file <- file.path(new_directory, file_name)
  file.rename(current_file, new_file)
  cat("File moved:", current_file, "to", new_file, "\n")
}

#MMHC
# Define the current directory path
current_directory <- "./data/output/MMHC"  # Update with your current directory path
# Define the new directory path
new_directory <- "./data/output/MMHC/CensusData/"
# List all files in the current directory
files_in_directory <- list.files(current_directory, pattern = "^AllianceInpatientCensus")
# Move each file to the new directory and delete the original
for (file_name in files_in_directory) {
  current_file <- file.path(current_directory, file_name)
  new_file <- file.path(new_directory, file_name)
  file.rename(current_file, new_file)
  cat("File moved:", current_file, "to", new_file, "\n")
}

#PH
# Define the current directory path
current_directory <- "./data/output/PH"  # Update with your current directory path
# Define the new directory path
new_directory <- "./data/output/PH/CensusData/"
# List all files in the current directory
files_in_directory <- list.files(current_directory, pattern = "^AllianceInpatientCensus")
# Move each file to the new directory and delete the original
for (file_name in files_in_directory) {
  current_file <- file.path(current_directory, file_name)
  new_file <- file.path(new_directory, file_name)
  file.rename(current_file, new_file)
  cat("File moved:", current_file, "to", new_file, "\n")
  }

#SBHS
# Define the current directory path
current_directory <- "./data/output/SBHS"  # Update with your current directory path
# Define the new directory path
new_directory <- "./data/output/SBHS/CensusData/"
# List all files in the current directory
files_in_directory <- list.files(current_directory, pattern = "^AllianceInpatientCensus")
# Move each file to the new directory and delete the original
for (file_name in files_in_directory) {
  current_file <- file.path(current_directory, file_name)
  new_file <- file.path(new_directory, file_name)
  file.rename(current_file, new_file)
  cat("File moved:", current_file, "to", new_file, "\n")
  }

#SHG
# Define the current directory path
current_directory <- "./data/output/SHG"  # Update with your current directory path
# Define the new directory path
new_directory <- "./data/output/SHG/CensusData/"
# List all files in the current directory
files_in_directory <- list.files(current_directory, pattern = "^AllianceInpatientCensus")
# Move each file to the new directory and delete the original
for (file_name in files_in_directory) {
  current_file <- file.path(current_directory, file_name)
  new_file <- file.path(new_directory, file_name)
  file.rename(current_file, new_file)
  cat("File moved:", current_file, "to", new_file, "\n")
}

#TGC
# Define the current directory path
current_directory <- "./data/output/TGC"  # Update with your current directory path
# Define the new directory path
new_directory <- "./data/output/TGC/CensusData/"
# List all files in the current directory
files_in_directory <- list.files(current_directory, pattern = "^AllianceInpatientCensus")
# Move each file to the new directory and delete the original
for (file_name in files_in_directory) {
  current_file <- file.path(current_directory, file_name)
  new_file <- file.path(new_directory, file_name)
  file.rename(current_file, new_file)
  cat("File moved:", current_file, "to", new_file, "\n")
  }
```

# Discharge Census

The query is run in SQL using "./source/BHA - DischargeCensus - 30 Days.sql"

## Import the data

```{r}


AllianceDischargeCensus <- read.csv("./data/Input/CensusDischarge.csv")

colnames(AllianceDischargeCensus) <- c("SourceSystem",
                                       "BuildVersion", 
                                       "LastName",
                                       "MiddleInitial",
                                       "FirstName",
                                       "MemberID",
                                       "AdmissionDate",
                                       "DischargeDate",
                                       "LOS",
                                       "DischargeDisposition",
                                       "Facility",
                                       "FacilityType",
                                       "StayType",
                                       "AdmittingDiagnosisCode",
                                       "AdmittingDiagnosisDescription",
                                       "DischargeDiagnosisCode",
                                       "DischargeDiagnosisDescription",
                                       "AdmissionAuthorizationIndicator",
                                       "BuildDate"
                                       )
```

## Attach date and merge with Alliance Member Enrollment Roster data

```{r}

# Load the data
Census_DC <- AllianceDischargeCensus

# Create AHCCCSID from MemberID
Census_DC$AHCCCSID <- substr(Census_DC$MemberID, 4, nchar(Census_DC$MemberID))

# Attach enrollment data to census data
Census_DC <- 
  merge(x = Census_DC,
        y = AllianceMemberEnrollmentRoster,
        by = "AHCCCSID",
        all.x = TRUE)

# Select variables for analysis
Census_DC <-
  Census_DC |> 
  select(
    PrimaryID,
    AHCCCSID,
    LastName.x,
    FirstName.x,
    #PhoneNumber,
    AdmissionDate,
    DischargeDate,
    LOS,
    DischargeDisposition,
    Facility,
    Age,
    Sex,
    DateOfBirth,
    MemberZipCode,
    MemberCountyOfResidence,
    AllianceProviderShortname,
    EnrollmentStartDate,
    DisenrollmentDate
    ) |> 
  arrange(AdmissionDate)

# Get today's date
today <- Sys.Date()
# Create a data frame
data <- data.frame(Census_DC)
# Define the file path and name
file_root <- "AllianceDischargeCensus"
output_path <- "./data/output/CensusData/"
csv_file <- paste0(output_path, file_root, "_", format(today, "%Y-%m-%d"), ".csv")
# Write the data frame to a CSV file
write.csv(data, csv_file, row.names = FALSE)
```

## Split data to each provider

```{r}


# Set the output directory
output_dir <- "./data/output/"
# Create the output directory if it doesn't exist
dir_create(output_dir)
# Get unique AllianceProviderShortname values
provider_names <- unique(Census_DC$AllianceProviderShortname)
# Get today's date in YYYY-MM-DD format
today_date <- format(Sys.Date(), "%Y-%m-%d")

# Split the table by AllianceProviderShortname and save individual CSV files
walk(provider_names, function(provider) {
  # Create provider-specific directory if it doesn't exist
  provider_dir <- file.path(output_dir, provider)
  dir_create(provider_dir)
  # Filter data for the current provider
  provider_data <- filter(Census_DC, AllianceProviderShortname == provider)
  # Construct file name with current date
  file_name <- file.path(provider_dir, paste0("AllianceDischargeCensus", provider, "_", today_date, ".csv"))
  # Save data as CSV
  write.csv(provider_data, file = file_name, row.names = FALSE)
})

# Move files to the Census Data folder in their respective directories, repeat for each provider

# CBI
# Define the current directory path
current_directory <- "./data/output/CBI"  # Update with your current directory path
# Define the new directory path
new_directory <- "./data/output/CBI/CensusData/"
# List all files in the current directory
files_in_directory <- list.files(current_directory, pattern = "^AllianceDischargeCensus")
# Move each file to the new directory and delete the original
for (file_name in files_in_directory) {
  current_file <- file.path(current_directory, file_name)
  new_file <- file.path(new_directory, file_name)
  file.rename(current_file, new_file)
  cat("File moved:", current_file, "to", new_file, "\n")
  }

#CPIH
# Define the current directory path
current_directory <- "./data/output/CPIH"  # Update with your current directory path
# Define the new directory path
new_directory <- "./data/output/CPIH/CensusData/"
# List all files in the current directory
files_in_directory <- list.files(current_directory, pattern = "^AllianceDischargeCensus")
# Move each file to the new directory and delete the original
for (file_name in files_in_directory) {
  current_file <- file.path(current_directory, file_name)
  new_file <- file.path(new_directory, file_name)
  file.rename(current_file, new_file)
  cat("File moved:", current_file, "to", new_file, "\n")
}

#LCBHS
# Define the current directory path
current_directory <- "./data/output/LCBHC"  # Update with your current directory path
# Define the new directory path
new_directory <- "./data/output/LCBHC/CensusData/"
# List all files in the current directory
files_in_directory <- list.files(current_directory, pattern = "^AllianceDischargeCensus")
# Move each file to the new directory and delete the original
for (file_name in files_in_directory) {
  current_file <- file.path(current_directory, file_name)
  new_file <- file.path(new_directory, file_name)
  file.rename(current_file, new_file)
  cat("File moved:", current_file, "to", new_file, "\n")
}

#MMHC
# Define the current directory path
current_directory <- "./data/output/MMHC"  # Update with your current directory path
# Define the new directory path
new_directory <- "./data/output/MMHC/CensusData/"
# List all files in the current directory
files_in_directory <- list.files(current_directory, pattern = "^AllianceDischargeCensus")
# Move each file to the new directory and delete the original
for (file_name in files_in_directory) {
  current_file <- file.path(current_directory, file_name)
  new_file <- file.path(new_directory, file_name)
  file.rename(current_file, new_file)
  cat("File moved:", current_file, "to", new_file, "\n")
}

#PH
# Define the current directory path
current_directory <- "./data/output/PH"  # Update with your current directory path
# Define the new directory path
new_directory <- "./data/output/PH/CensusData/"
# List all files in the current directory
files_in_directory <- list.files(current_directory, pattern = "^AllianceDischargeCensus")
# Move each file to the new directory and delete the original
for (file_name in files_in_directory) {
  current_file <- file.path(current_directory, file_name)
  new_file <- file.path(new_directory, file_name)
  file.rename(current_file, new_file)
  cat("File moved:", current_file, "to", new_file, "\n")
  }

#SBHS
# Define the current directory path
current_directory <- "./data/output/SBHS"  # Update with your current directory path
# Define the new directory path
new_directory <- "./data/output/SBHS/CensusData/"
# List all files in the current directory
files_in_directory <- list.files(current_directory, pattern = "^AllianceDischargeCensus")
# Move each file to the new directory and delete the original
for (file_name in files_in_directory) {
  current_file <- file.path(current_directory, file_name)
  new_file <- file.path(new_directory, file_name)
  file.rename(current_file, new_file)
  cat("File moved:", current_file, "to", new_file, "\n")
  }

#SHG
# Define the current directory path
current_directory <- "./data/output/SHG"  # Update with your current directory path
# Define the new directory path
new_directory <- "./data/output/SHG/CensusData/"
# List all files in the current directory
files_in_directory <- list.files(current_directory, pattern = "^AllianceDischargeCensus")
# Move each file to the new directory and delete the original
for (file_name in files_in_directory) {
  current_file <- file.path(current_directory, file_name)
  new_file <- file.path(new_directory, file_name)
  file.rename(current_file, new_file)
  cat("File moved:", current_file, "to", new_file, "\n")
}

#TGC
# Define the current directory path
current_directory <- "./data/output/TGC"  # Update with your current directory path
# Define the new directory path
new_directory <- "./data/output/TGC/CensusData/"
# List all files in the current directory
files_in_directory <- list.files(current_directory, pattern = "^AllianceDischargeCensus")
# Move each file to the new directory and delete the original
for (file_name in files_in_directory) {
  current_file <- file.path(current_directory, file_name)
  new_file <- file.path(new_directory, file_name)
  file.rename(current_file, new_file)
  cat("File moved:", current_file, "to", new_file, "\n")
  }
```
