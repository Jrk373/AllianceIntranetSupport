---
title: "AllianceIntranetSupport"
subtitle: "TBD"
author: 
  name: "John Ryan Kivela, MA"
  email: "Ryan.Kivela@narbha.org"
date: today
date-format: long
format:
  html:
    theme: pulse
    embed-resources: true
    toc: true
    toc-depth: 6
    code-fold: true
    footnotes-hover: true
---

# Introduction

The purpose of this document is to establish processes for converting Alliance data models into useable data prodiucts for our providers.

The tools that are included in this document are:
  -   Active NAZ Membership
  -   VBP Quality Roster
  -   FUH7 Follow Up List
  -   AMM Follow Up List
  
Diving right in...

I already did some of this work in a different prototype project so we'll be bringing some of that over...

```{r}
#| label: Setup
#| eval: true
#| include: false
#| echo: false
#| warning: false
#| error: false

## Load Libraries
library(fs)
library(purrr)
library(readxl)
library(tidyverse)

```

# Alliance Member Enrollment Roster

```{r}
#| label: Alliance Member Enrollment Roster
#| eval: true
#| include: false
#| echo: false
#| warning: false
#| error: false

# Import the data from the monthly Alliance Progress Report
AllianceMemberEnrollmentRoster <- read.csv("./data/ActiveNAZMembership.csv")

# Rename the columns to easy to understand names
colnames(AllianceMemberEnrollmentRoster) <- c("Index", "PrimaryID", "AHCCCSID", "LastName", "FirstName", "Sex", "DateOfBirth", "MemberZipCode", "MemberCountyOfResidence", "AllianceProviderShortname", "EnrollmentStartDate", "LineOfBusiness", "EligibilityGroup", "DisenrollmentDate", "Age")

# Create a directory to store the CSV files
data_dir <- "./data/output"
dir.create(data_dir, showWarnings = FALSE)

# Split the data frame based on AllianceProviderShortname
split_data <- split(AllianceMemberEnrollmentRoster, AllianceMemberEnrollmentRoster$AllianceProviderShortname)

# Iterate over the list and save each data frame as a separate CSV file in the corresponding folder
for (provider_name in names(split_data)) {
  provider_data <- split_data[[provider_name]]
  folder_name <- file.path(data_dir, provider_name)
  dir.create(folder_name, showWarnings = FALSE)
  file_name <- file.path(folder_name, paste0("AllianceMemberEnrollmentRoster_", provider_name, ".csv"))
  write.csv(provider_data, file = file_name, row.names = FALSE)
}

```

# VBP Quality Roster

```{r}
#| label: VBP Quality Roster
#| eval: true
#| include: false
#| echo: false
#| warning: false
#| error: false

# Import the data from the VBPValidationReport
VBPQualityRoster <- read.csv("./data/VBPQR_AllAPsCombined_Cleaned_complete.csv")

# Create the output directory
output_dir <- "./data/output/"
dir.create(output_dir, showWarnings = FALSE)

# Split the data frame based on Provider_Shortname
split_data <- split(VBPQualityRoster, VBPQualityRoster$Provider_Shortname)

# Iterate over the list and save each data frame as a separate CSV file in the corresponding folder
for (provider_name in names(split_data)) {
  provider_data <- split_data[[provider_name]]
  
  # Create the folder for the provider if it doesn't exist
  provider_folder <- file.path(output_dir, provider_name)
  dir.create(provider_folder, showWarnings = FALSE, recursive = TRUE)
  
  # Construct the file name
  file_name <- file.path(provider_folder, paste0("VBPQualityRoster_", provider_name, ".csv"))
  
  # Save the data frame as a CSV file
  write.csv(provider_data, file = file_name, row.names = FALSE)
}

```


# FUH7 Follow Up List

```{r}
#| label: FUH7 Member Follow Up List
#| eval: true
#| include: false
#| echo: false
#| warning: false
#| error: false

# import data
FUH7_MemberFollowUpList <- read.csv("./data/FUH7_MemberFollowUpList.csv")

# Rename the columns to easy to understand names
colnames(FUH7_MemberFollowUpList) <- c("Index", "MemberID", "VBPEligible", "ClaimsEligible", "ValidationMatch", "ClaimsPrimaryID", "EnrollmentPrimaryID", "AHCCCSID", "LastName", "FirstName", "DateOfBirth", "Sex", "Age", "MemberZipCode", "DateOfService", "EndDateOfService", "AdjudicatedServiceCode", "ProcedureCode", "RevCode", "PlaceOfService", "Providertype", "PrimaryDiagnosis", "Dx1", "Dx2", "Dx3", "Dx4", "Dx5", "Dx6", "Dx7", "Dx8", "Dx9" , "Dx10", "Dx11", "Dx12", "ProviderName", "RenderingProviderNPI", "AutoAssignedPCPName", "AmountPaid", "AllianceProviderShortname", "EligibleMHDiagnosis")

# Replace "Polara" with "PH"
FUH7_MemberFollowUpList$AllianceProviderShortname <- ifelse(FUH7_MemberFollowUpList$AllianceProviderShortname == "Polara", "PH", FUH7_MemberFollowUpList$AllianceProviderShortname)

# Replace "SBH" with "SBHS"
FUH7_MemberFollowUpList$AllianceProviderShortname <- ifelse(FUH7_MemberFollowUpList$AllianceProviderShortname == "SBH", "SBHS", FUH7_MemberFollowUpList$AllianceProviderShortname)

# Create the output directory
output_dir <- "./data/output/"
dir.create(output_dir, showWarnings = FALSE)

# Split the data frame based on AllianceProviderShortname
split_data <- split(FUH7_MemberFollowUpList, FUH7_MemberFollowUpList$AllianceProviderShortname)

# Iterate over the list and save each data frame as a separate CSV file in the corresponding folder
for (provider_name in names(split_data)) {
  provider_data <- split_data[[provider_name]]
  
  # Create the folder for the provider if it doesn't exist
  provider_folder <- file.path(output_dir, provider_name)
  dir.create(provider_folder, showWarnings = FALSE, recursive = TRUE)
  
  # Construct the file name
  file_name <- file.path(provider_folder, paste0("FUH7_MemberFollowUpList_", provider_name, ".csv"))
  
  # Save the data frame as a CSV file
  write.csv(provider_data, file = file_name, row.names = FALSE)
}

```

# Provider Sharepoint Partner List

```{r}
#| label: Website Partners
#| eval: true
#| include: false
#| echo: false
#| warning: false
#| error: false

#Import Data
IntranetWebsitePartners <- read_xlsx("./data/Aid-IntranetWebsitePartners.xlsx", sheet = "Sheet1")

# Set the output directory
output_dir <- "./data/output/"

# Create the output directory if it doesn't exist
dir_create(output_dir)

# Get unique AllianceProviderShortname values
provider_names <- unique(IntranetWebsitePartners$AllianceProviderShortname)

# Split the table by AllianceProviderShortname and save individual CSV files
walk(provider_names, function(provider) {
  # Create provider-specific directory if it doesn't exist
  provider_dir <- file.path(output_dir, provider)
  dir_create(provider_dir)
  
  # Filter data for the current provider
  provider_data <- filter(IntranetWebsitePartners, AllianceProviderShortname == provider)
  
  # Construct file name with current date
  file_name <- file.path(provider_dir, paste0("IntranetWebsitePartners_", provider, "_", ".csv"))
  
  # Save data as CSV
  write.csv(provider_data, file = file_name, row.names = FALSE)
})

```

# Inpatient Census

This is the inpatient census received from HC Medical Management.

```{r}
#| label: Inpatient Census
#| eval: true
#| include: false
#| echo: false
#| warning: false
#| error: false

#Import Data
Census_IP_Original <- read.csv("./data/AZBA_HCA_CensusIP.csv")

Census_IP <- Census_IP_Original

Census_IP$AHCCCSID <- substr(Census_IP$MEM_ID, 4, nchar(Census_IP$MEM_ID))

Census_IP <- 
  merge(x = Census_IP,
        y = AllianceMemberEnrollmentRoster,
        by = "AHCCCSID",
        all.x = TRUE)

Census_IP <-
  Census_IP |> 
  select(
    PrimaryID,
    AHCCCSID,
    LAST_NAME,
    FIRST_NAME,
    MEM_PHONE,
    ADM_DTE,
    LOS,
    FACILITY_NAME,
    FACILITY_TYPE_DESC,
    Age,
    Sex,
    DateOfBirth,
    MemberZipCode,
    MemberCountyOfResidence,
    AllianceProviderShortname,
    EnrollmentStartDate,
    DisenrollmentDate
    
  )

```

```{r}
#| label: Inpatient Discharge
#| eval: true
#| include: false
#| echo: false
#| warning: false
#| error: false

#Import Data
Census_DC_Original <- read.csv("./data/AZBA_HCA_CensusDC.csv")

Census_DC <- Census_DC_Original

Census_DC$AHCCCSID <- substr(Census_DC$MEM_ID, 4, nchar(Census_DC$MEM_ID))

Census_DC <- 
  merge(x = Census_DC,
        y = AllianceMemberEnrollmentRoster,
        by = "AHCCCSID",
        all.x = TRUE)

Census_DC <-
  Census_DC |> 
  select(
    PrimaryID,
    AHCCCSID,
    LAST_NAME,
    FIRST_NAME,
    ADM_DATE,
    DCH_DTE,
    LOS,
    DCH_DESC,
    FACILITY_NAME,
    FACILITY_TYPE_DESC,
    Age,
    Sex,
    DateOfBirth,
    MemberZipCode,
    MemberCountyOfResidence,
    AllianceProviderShortname,
    EnrollmentStartDate,
    DisenrollmentDate
    )

```

# Now, about the Power automate

Within Power Automate there is a Flow for each Provider and the Alliance as a whole. 