---
title: "Alliance HIE Report"
subtitle: "TBD"
author: 
  name: "John Ryan Kivela, MA"
  email: "Ryan.Kivela@narbha.org"
date: today
date-format: long
format:
  html:
    theme: pulse
    embed-resources: true
    toc: true
    toc-depth: 6
    code-fold: true
    footnotes-hover: true
---

# Setup

```{r}
#| label: Setup
#| eval: true
#| include: false
#| echo: false
#| warning: false
#| error: false

## Load Libraries
library(tidyverse)
library(DBI)

# Set up ODBC Connection
PHXSQLP01A <- DBI::dbConnect(odbc::odbc(), "PHXSQLP01A")
# QRPTP01 <- DBI::dbConnect(odbc::odbc(),"AllianceData")


```

# Pre-load data

This procedure loads previously processed data for ease of use in development. 

```{r}
#| label: Preload Data
#| eval: true
#| include: false
#| echo: false
#| warning: false
#| error: false

# AllianceEnrolledMembers <- read.csv("./data/input/AllianceEnrolledMembers.csv")

# Data_HIE <- read.csv("./data/input/HIE.csv")

```

# HIE Data

This part of the program queries the BCBSAZ HCA data warehouse for the HIE data. This data is updated daily.

*As of 1/31/24 this table is not working on the HCA side. HCA data people are working on it. In the meantime we are using demo data from December 2023.*

```{sql, connection = PHXSQLP01A, output.var = "Data_HIE"}

Declare @start as date = '12-01-2023'
Declare @end as date = '12-31-2023'

SELECT * 

FROM HIEHL7.dbo.MasterHL7Item

WHERE Admit_DateTime BETWEEN @start AND @end

--WHERE admit_dateTime >= DATEADD(day, -30, getdate())

```

## HIE Data Wrangling

The HIE data is well known for being a hot mess. This next set of procedures wrangles the raw data into a usable format.

```{r}

# Select variables
HIE <-
  Data_HIE |> 
  select(28, 3, 4, 5, 8, 11, 12, 13, 15:21) |> 
  mutate_all(str_squish)

# Split Name into first name/last name

HIE <-
  HIE |> 
  separate(Name, into = c("FirstName", "Remaining"), 
           sep = " ", 
           extra = "merge") |> 
  separate(Remaining, into = c("MiddleName", "LastName"), 
           sep = " ", 
           extra = "merge", 
           fill = "right") |> 
  mutate(PointOfCare_ED = ifelse(grepl("ED", PointOfCare), 1, 0)) |> 
  filter(MessageTypeDescription == "REGISTER A PATIENT" | MessageTypeDescription == "DISCHARGE/END VISIT") |> 
  group_by(VisitNumber) |>
  mutate(Discharge_DateTime = ifelse(MessageType == "A04" & any(MessageType == "A03"), max(Discharge_DateTime[MessageType == "A03"]), Discharge_DateTime)) |> 
  filter(MessageType == "A04") |> 
  select(1, 4, 2, 5, 6, 8, 18, 9, 10, 16, 17) |> 
  rename(AhcccsId = "AHCCCSId") |> 
  mutate_all(str_squish)

# Get the current date
current_date <- Sys.Date()

# Create the file name with the current date
file_name <- paste0("./data/input/Data_HIE/HIE_", current_date, ".csv")

# Write the HIE table to the CSV file
write.csv(HIE, file_name, row.names = FALSE)

```

```{r}

HIE_Roster1 <-
  merge(x = HIE,
        y = AllianceEnrolledMembers,
        by = "AhcccsId") |> 
        #,
        #all.x = TRUE) |> 
  filter(AhcccsId != "") |> 
  select(1, 12, 13, 14, 19, 5, 8, 9, 7, 6, 15:18, 21:44) |> 
  rename(LastName = "LastName.y",
         FirstName = "FirstName.y",
         DOB = "DOB.y")

HIE_Roster2 <-
  HIE |> 
  filter(AhcccsId == "")

HIE_Roster2 <-
  merge(x = HIE_Roster2,
        y = AllianceEnrolledMembers,
        by = c("LastName", "FirstName")) |> 
        #,
        #all.x = TRUE) |> 
  filter(!is.na(PrimaryId)) |> 
  select(3, 12, 1, 2, 18, 5, 8, 9, 7, 6, 14:17, 20:43) |> 
  rename(AhcccsId = "AhcccsId.x",
         DOB = "DOB.y")

HIE_Roster <-
  rbind(HIE_Roster1, 
        HIE_Roster2)

```

# Distribute Data

The overall Alliance Daily Inpatient Census is split according to Alliance Provider, and saved to their respective intranet folders.

```{r}
# Create a directory to store the CSV files
data_dir <- "./data/output"
dir.create(data_dir, showWarnings = FALSE)

# Split the data frame based on AllianceProviderShortname
split_data <- split(HIE_Roster, HIE_Roster$BHHShortName)

# Iterate over the list and save each data frame as a separate CSV file in the corresponding folder
for (provider_name in names(split_data)) {
  provider_data <- split_data[[provider_name]]
  folder_name <- file.path(data_dir, provider_name)
  dir.create(folder_name, showWarnings = FALSE)
  file_name <- file.path(folder_name, paste0("HIE_Roster_", provider_name, ".csv"))
  write.csv(provider_data, file = file_name, row.names = FALSE)
}
```











