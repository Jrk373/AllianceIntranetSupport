---
title: "Alliance HIE Report"
subtitle: "TBD"
author: 
  name: "John Ryan Kivela, MA"
  email: "Ryan.Kivela@narbha.org"
date: today
date-format: long
format:
  html:
    theme: pulse
    embed-resources: true
    toc: true
    toc-depth: 6
    code-fold: true
    footnotes-hover: true
---

# Setup

```{r}
#| label: Setup
#| eval: true
#| include: false
#| echo: false
#| warning: false
#| error: false

## Load Libraries
 library(fs)
# library(purrr)
library(tidyverse)
# library(lubridate)
library(readxl)
# library(odbc)
library(DBI)

# Set up ODBC Connection
# PHXSQLP01A <- DBI::dbConnect(odbc::odbc(), "PHXSQLP01A")
# QRPTP01 <- DBI::dbConnect(odbc::odbc(),"AllianceData")

```

# Pre-load data

This procedure loads previously processed data for ease of use in development. 

```{r}

Data_AllianceEnrolledMembers <- read.csv("./data/input/AllianceEnrolledMembers.csv")

Data_HIE <- read.csv("./data/input/HIE.csv")

```

# Active Members
```{r}
AllianceEnrolledMembers <-
  Data_AllianceEnrolledMembers %>%
  group_by(AhcccsId) %>%
  filter(EnrollmentDate == max(EnrollmentDate))

```

# HIE

## SQL Query

```{sql, connection = PHXSQLP01A, output.var = "Data_HIE"}

Declare @start as date = '12-01-2023'
Declare @end as date = '12-31-2023'

SELECT * 

FROM HIEHL7.dbo.MasterHL7Item

WHERE Admit_DateTime BETWEEN @start AND @end

--WHERE admit_dateTime >= DATEADD(day, -30, getdate())

```

## HIE Data Wrangling

The HIE data is well known for being a hot mess. This next set of procedures wrangles the raw data into a useable format.

```{r}

# Select variables
HIE <-
  Data_HIE |> 
  select(28, 3, 4, 5, 8, 11, 12, 13, 15:21) |> 
  mutate_all(str_squish)

# Split Name into first name/last name

HIE <-
  HIE |> 
  separate(Name, into = c("FirstName", "Remaining"), 
           sep = " ", 
           extra = "merge") |> 
  separate(Remaining, into = c("MiddleName", "LastName"), 
           sep = " ", 
           extra = "merge", 
           fill = "right") |> 
  separate(DOB, into = c("MM","DD","YYYY"),
           sep = "/",
           extra = "merge") |> 
  mutate(DOB = as.Date(paste(YYYY, MM, DD, sep = "-"))) |> 
  mutate(PointOfCare_ED = ifelse(grepl("ED", PointOfCare), 1, 0)) |> 
  filter(MessageTypeDescription == "REGISTER A PATIENT" | MessageTypeDescription == "DISCHARGE/END VISIT") |> 
  group_by(VisitNumber) |>
  mutate(Discharge_DateTime = ifelse(MessageType == "A04" & any(MessageType == "A03"), max(Discharge_DateTime[MessageType == "A03"]), Discharge_DateTime)) |> 
  filter(MessageType == "A04") |> 
  select(1, 4, 2, 20, 8, 10, 21, 11, 12) |> 
  rename(AhcccsId = "AHCCCSId") |> 
  mutate_all(str_squish)

HIE_Roster1 <-
  merge(x = HIE,
        y = AllianceEnrolledMembers,
        by = "AhcccsId") |> 
        #,
        #all.x = TRUE) |> 
  filter(AhcccsId != "") |> 
  select(1, 11, 12, 13, 18, 5:9, 14:17, 19:43) |> 
  rename(LastName = "LastName.y",
         FirstName = "FirstName.y",
         DOB = "DOB.y")

HIE_Roster2 <-
  HIE |> 
  filter(AhcccsId == "")

HIE_Roster2 <-
  merge(x = HIE_Roster2,
        y = AllianceEnrolledMembers,
        by = c("LastName", "FirstName")) |> 
        #,
        #all.x = TRUE) |> 
  filter(!is.na(PrimaryId)) |> 
  select(3, 11, 1, 2, 17, 5:9, 13:16, 18:42) |> 
  rename(AhcccsId = "AhcccsId.x",
         DOB = "DOB.y")

HIE_Roster <-
  rbind(HIE_Roster1, 
        HIE_Roster2)

```



# Enrollment Roster

## Description

Import the most HIE roster. The Alliance Member Enrollment Roster is generated monthly as a part of the Alliance Progress Report.

## Procedure

## Code

```{r}
#| label: Alliance Member Enrollment Roster
#| eval: true
#| include: true
#| echo: true
#| warning: false
#| error: false

# Import the data from the monthly Alliance Progress Report
AllianceMemberEnrollmentRoster <- read.csv("./data/ActiveNAZMembership.csv")

AllianceMemberEnrollmentRoster <-
  AllianceMemberEnrollmentRoster |> 
  select(
    -SpokenLanguage,
    #-EmploymentStatus,
    -MilitaryStatus
  )

```

```{r}
#| label: combine with enrollment roster
#| eval: true
#| include: true
#| echo: true
#| warning: false
#| error: false

# Merge tables
AllianceDailyInpatientCensus <-
  merge(x = HIE,
        y = AllianceMemberEnrollmentRoster,
        by = "AHCCCSID",
        all.x = TRUE)

# Rename some columns
AllianceDailyInpatientCensus <-
  AllianceDailyInpatientCensus |> 
  rename(
    LastName = "LastName.x",
    FirstName = "FirstName.x",
    #FacilityType = "FacilityType.x",
    #StayType = "StayType.x"
  ) |> 
  select(
    -X, 
    -FirstName.y,
    -LastName.y,
    -DOD
  )

# Remove duplicates
AllianceDailyInpatientCensus <-
  AllianceDailyInpatientCensus |> 
  distinct(
    AHCCCSID,
    LastName,
    AdmissionDate,
    .keep_all = TRUE
  )

# Arrange by Admit date and AHCCCSID
AllianceDailyInpatientCensus <-
  AllianceDailyInpatientCensus |> 
  arrange(desc(AdmissionDate), AHCCCSID)

# Write to CSV
write.csv(AllianceDailyInpatientCensus,"./data/Output/AllianceDailyInpatientCensus.csv")

```
:::

# Distribute Data

::: panel-tabset

## Description

The overall Alliance Daily Inpatient Census is split according to Alliance Provider, and saved to their respective intranet folders.

## Procedure

## Code

```{r}
# Create a directory to store the CSV files
data_dir <- "./data/output"
dir.create(data_dir, showWarnings = FALSE)

# Split the data frame based on AllianceProviderShortname
split_data <- split(AllianceDailyInpatientCensus, AllianceDailyInpatientCensus$BHHShortName)

# Iterate over the list and save each data frame as a separate CSV file in the corresponding folder
for (provider_name in names(split_data)) {
  provider_data <- split_data[[provider_name]]
  folder_name <- file.path(data_dir, provider_name)
  dir.create(folder_name, showWarnings = FALSE)
  file_name <- file.path(folder_name, paste0("AllianceDailyInpatientCensus_", provider_name, ".csv"))
  write.csv(provider_data, file = file_name, row.names = FALSE)
}
```

:::










